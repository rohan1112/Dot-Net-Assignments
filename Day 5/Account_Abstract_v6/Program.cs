// Create abstract class account having member id. name, balance
// Id is generated by application It is readonly property for ID.
// It has abstract method public abstract void withdraw(double amt);
// It has static method public static double payint(); which will return interest and increase balance if account holder has positive balance
// It has deposit method which will increase the balance.
// Write getter setter for name 
// Balance can be set only by child class.
// It has static double int_rate=0.07
// Create two child class Saving, Current
// Initialise data by calling parentclass constructor
// In saving account maintain minimum balance 1000 for this declare
// Const double minbal=1000
// In current account negative balance allowed.
// Let both child class override withdraw method.
// Create array of account class and store 2 object of saving account and current account.
// Do the transaction. When you load it should print name of bank




namespace BankAccount
{

    public abstract class Account
    {
        private int id;
        private string name, AccType;
        private double balance;
        private static int count = 0;
        internal const float minBalance = 1000F;
        private static double InterestRate = 0.07;
        private double interest;

        static Account()
        {
            Console.WriteLine("Welcome to 901 Gringotts Bank @2024");
        }

        public Account(string name, double balance, string accountType)
        {
            if (count > 1)
            {
                throw new Exception("No space for additional account");
            }
            if (balance < minBalance)
            {
                throw new Exception("Balance must be greater than 1000");
            }
            else
            {
                
                Name = name;
                Balance = balance;
                AccountType = accountType;
                id = ++count;

            }
        }

        public static double CalcInterestAmount(Account obj)
        {
            obj.interest = obj.balance * InterestRate;
            obj.Balance = obj.balance + obj.interest;
            return obj.interest;
        }

         public abstract void Withdraw(float amt);
         
            //  if (amt >0 && amt < balance && balance-amt>minBalance)
            //  {
            //      Balance = balance - amt;
            //  }
            //  else
            //  {
            //     throw new Exception("Minimum 1000 balance must be maintain");
            //  }
         

        public void Depoist(float amt)
        {
            if (amt < 1)
            {
                throw new Exception("Cannot depoist 0 or less than Zero amount");
            }

            if (balance == 0 && amt < 1000)
            {
                Console.WriteLine("Depoist amount must be greater than 1000");
            }
            Balance += amt;
        }

        public override string ToString()
        {
            return string.Format("id:{0} name:{1} balance:{2:0.00} Type:{3}", id, name, balance,AccType);
        }

        public int Id
        {
            get { return id; }
        }

        public string AccountType
        {
            get { return AccType; }
            set
            {
                AccType = value;
            }
        }

        public string Name
        {
            get { return name; }
            set
            {
                if (value.Length < 3 && value.Length >= 15)
                {
                    throw new Exception("First Name must be greater than 3 char and less than 15 char");
                }
                name = value;
            }
        }

        public double Balance
        {
            get { return balance; }
            protected set
            {
                if (this.AccountType == "Current")
                {
                    balance = value;
                }
                else if (value < 1000)
                {
                    throw new Exception("Balance must be greater than 1000");
                }
                balance = value;
            }
        }

    }
    public class Program
    {
        static void Main(string[] args)
        {
            try{

            Account[] AccArr=new Account[2];
            AccArr[0] = new SavingAccount("Rohan", 20000, "Saving");
            AccArr[1] = new CurrentAccount("Pratik",24000, "Current");
            // AccArr[2] = new SavingAccount("Rohan", 20000, "Saving"); //No Space 

            for(int i=0;i<AccArr.Length;i++){
                AccArr[i].Withdraw(1000);
                Console.WriteLine(AccArr[i]);
            }
            }catch(Exception e){Console.WriteLine(e.Message);}
            // try
            // {
            //     Account s = new SavingAccount("Rohan", 20000, "Saving");
            //     s.Withdraw(1000);
            //     Console.WriteLine(s);
            //     Account c = new CurrentAccount("Pratik", 24000, "Current");
            //     c.Withdraw(25000);
            //     Console.WriteLine(c);
            //     Account s1 = new SavingAccount("Sameer", 28025, "Saving");
            //     s1.Withdraw(8000);
            //     Console.WriteLine(s1);
            //     Account c1 = new CurrentAccount("Yash", 32000, "Current");
            //     c1.Withdraw(32000);
            //     Console.WriteLine(c1);
            // }
            // catch (Exception e)
            // {
            //     Console.WriteLine(e.Message);
            // }
        }
    }
}